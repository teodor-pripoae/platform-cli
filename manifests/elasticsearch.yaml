{{- $JVM_OPTIONS := .elasticsearch.mem.requests | strings.ReplaceAll "Ki" "k" | strings.ReplaceAll "Mi" "m" | strings.ReplaceAll "Gi" "g" -}}
apiVersion: elasticsearch.k8s.elastic.co/v1
kind: Elasticsearch
metadata:
  name: logs
  namespace: eck
spec:
  version: {{.elasticsearch.version}}
  secureSettings:
    - secretName: elasticsearch-oidc-config
  nodeSets:
    - name: default
      count: {{.elasticsearch.replicas}}
      config:
        node.master: true
        node.data: true
        node.ingest: true
        node.store.allow_mmap: false
        xpack.security.transport.ssl.supported_protocols: TLSv1.1,TLSv1.2
        xpack.security.authc.anonymous.roles: fluentd
        xpack.security.authc.token.enabled: true
        xpack.security.authc.realms.oidc.dex:
          order: 0
          rp.client_id: "Kubernetes"
          rp.response_type: code
          rp.redirect_uri: "https://kibana.{{ .domain }}/api/security/oidc/callback"
          op.issuer: "https://dex.{{ .domain }}"
          op.authorization_endpoint: "https://dex.{{ .domain }}/oauth2/v1/authorize"
          op.token_endpoint: "https://dex.{{ .domain }}/oauth2/v1/token"
          op.jwkset_path: "https://dex.{{ .domain }}/keys"
          op.userinfo_endpoint: "https://dex.{{ .domain }}/oauth2/v1/userinfo"
          op.endsession_endpoint: "https://dex.{{ .domain }}/oauth2/v1/logout"
          rp.post_logout_redirect_uri: "https://kibana.{{ .domain }}/security/logged_out"
          claims.principal: sub
          claims.groups: "groups"
      podTemplate:
        spec:
          containers:
            - name: elasticsearch
              env:
                - name: ES_JAVA_OPTS
                  value: -Xms{{ $JVM_OPTIONS }} -Xmx{{ $JVM_OPTIONS }}
              resources:
                requests:
                  memory: {{.elasticsearch.mem.requests}}
                  cpu: 0.5
                limits:
                  memory: {{.elasticsearch.mem.limits}}
                  cpu: 2
      {{- if not (eq .elasticsearch.persistence.enabled true) }}
          volumes:
            - name: elasticsearch-data
              emptyDir: {}
      {{- else}}
      volumeClaimTemplates:
        - metadata:
            name: elasticsearch-data
          spec:
            accessModes:
              - ReadWriteOnce
            resources:
              requests:
                storage: {{.elasticsearch.persistence.capacity}}
            storageClassName: {{.elasticsearch.persistence.storageClass}}
      {{- end}}
---
apiVersion: v1
kind: Secret
metadata:
  name: elasticsearch-oidc-config
  namespace: eck
type: Opaque
data:
  xpack.security.authc.realms.oidc.dex.rp.client_secret: {{ "ZXhhbXBsZS1hcHAtc2VjcmV0" | base64.Encode }}
---
apiVersion: kibana.k8s.elastic.co/v1
kind: Kibana
metadata:
  name: logs
  namespace: eck
spec:
  version: 7.9.1
  count: 1
  config:
    elasticsearch.ssl.certificateAuthorities: /usr/share/kibana/config/elasticsearch-certs/ca.crt
    xpack.security.authc.providers:
      oidc.Dex:
        order: 0
        realm: "dex"
      # Basic Access is required e.g. to utilize the Kibana API for automated shard allocation with elastic user.
      basic.basic1:
        order: 1
  elasticsearchRef:
    name: logs
---
apiVersion: extensions/v1beta1
kind: Ingress
metadata:
  name: logs-ing
  namespace: eck
  annotations:
    nginx.ingress.kubernetes.io/backend-protocol: "HTTPS"
    nginx.ingress.kubernetes.io/client_max_body_size: "64m"
    kubernetes.io/tls-acme: "true"
spec:
  tls:
    - secretName: logs-tls
      hosts:
        - logs.{{.domain}}
  rules:
    - host: logs.{{.domain}}
      http:
        paths:
          - backend:
              serviceName: logs-es-http
              servicePort: 9200
---
apiVersion: extensions/v1beta1
kind: Ingress
metadata:
  name: kibana-ing
  namespace: eck
  annotations:
    nginx.ingress.kubernetes.io/backend-protocol: "HTTPS"
    kubernetes.io/tls-acme: "true"
spec:
  tls:
    - secretName: kibana-tls
      hosts:
        - kibana.{{.domain}}
  rules:
    - host: kibana.{{.domain}}
      http:
        paths:
          - backend:
              serviceName: logs-kb-http
              servicePort: 5601
